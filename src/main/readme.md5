1. Изначально хэш сет, equals hashcode не переопределены, все добавляется хорошо. Почему не находится тариф для бедных?
2. Надо добавить equals и hashcode, теперь все находится
3. Добавить сеттер и строки. Почему оба contains false?
tariff1.setName("Новый"); строка 18
System.out.println(tariffs.contains(new Tariff(100, "Новый"))); строка 20
Почему оба contains false? Первый потому что такого объекта больше нет, а второй потому что объект изменился, хэш считается
иначе, бакет ищется другой, а объект лежит в другом бакете. Он так не найдется.
Поэтому нельзя использовать изменяемые объекты в качестве ключа, они должны быть неизменяемые:
final поля, сам класс final, нет сеттеров, геттеры возвращают копии, если поля изменяемые объекты

4. сделаем все final. как думаешь, теперь безопасно использовать этот объект в качестве ключа в сете?
Если нет не безопасный, то в каком случае, почему может потеряться? Потому что в treeMap нужен компаратор и если он
будет использовать не тот же набор полей что и equals (это контракт между equals и compareTo)

Если да или не до конца объяснил, то тогда вот задача
5.Нужно отсортировать тарифы по возрастанию цены. Как бы ты это сделал?
Можно конечно через стрим, создать отсортированный лист. но если передавать его куда-то дальше, то новые объекты добавятся
в конец списка и вся сортировка слетит. Я хочу чтобы это был всегда отсортированный список тарифов
тогда надо использовать TreeSet. Если просто написать new TreeSet то подсвечивает желтым. Почему?
Потому что ему нужен компаратор либо же объект должен быть Comparable
Что будет если запустить?
Будет экспешн
Тогда нам нужен компаратор, отсортировать надо по цене. Напишем тогда вот такой Comparator.comparingInt(Tariff::getPrice)
Выходит что опять проблема, при одинаковой цене будут теряться объекты, поскольку компаратор сравнивает лишь по цене.
Компаратор должен использовать тот же набор полей что и equals (это контракт между equals и compareTo)
new TreeSet<>(Comparator.comparingInt(Tariff::getPrice).thenComparing(Tariff::getName));

6. И вот последнее, что победит компаратор из конструктора или Comparable?

 implements Comparable<Tariff>

    @Override
    public int compareTo(Tariff o) {
        return this.price - o.getPrice();
    }
